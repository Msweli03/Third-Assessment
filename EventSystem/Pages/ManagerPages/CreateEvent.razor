@page "/change-event/{EventId:int}"
@using EventSystem.Data
@using EventSystem.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<h3>Edit Event</h3>

@if (eventToEdit == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="eventToEdit" OnValidSubmit="UpdateEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="eventToEdit.Name" />
        </div>

        <div class="form-group">
            <label for="date">Date:</label>
            <InputDate id="date" class="form-control" @bind-Value="eventToEdit.Date" />
        </div>

        <div class="form-group">
            <label for="seatsAvailable">Seats Available:</label>
            <InputNumber id="seatsAvailable" class="form-control" @bind-Value="eventToEdit.SeatsAvailable" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int EventId { get; set; }

    private Event eventToEdit;

    protected override async Task OnInitializedAsync()
    {
        eventToEdit = await DbContext.Events.FindAsync(EventId);
        if (eventToEdit == null)
        {
            Navigation.NavigateTo("/manage-events");
        }
    }

    private async Task UpdateEvent()
    {
        if (eventToEdit != null)
        {
            DbContext.Events.Update(eventToEdit);
            await DbContext.SaveChangesAsync();
            Navigation.NavigateTo("/manage-events");
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/manage-events");
    }
}
